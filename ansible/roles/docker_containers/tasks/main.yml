---
- name: Get information about running containers
  action:
    module: docker_facts

- name: Create container configuration directory
  file:
    path: /etc/docker-containers
    state: directory
    mode: 0750

- name: Configure containers
  copy:
    content: "{{ settings[item].vars | default({}) | to_yaml }}"
    dest: "/etc/docker-containers/{{ settings[item].name }}.yml"
    mode: 0640
  register: configure_res
  with_items: "{{ run_names }}"

- name: Update and start containers
  docker:
    name: "{{ settings[item].name }}"
    hostname: "{{ settings[item].name }}"
    image: "{{ settings[item].image }}"
    command: "{{ settings[item].command | default(None) }}"
    net: bridge
    expose: "{{ settings[item].expose | default([]) }}"
    ports: "{{ settings[item].ports | default([]) }}"
    links: "{{ settings[item].links | default([]) }}"
    extra_hosts: "{{ settings[item].extra_hosts | default({}) }}"
    env: "{{ settings[item].env | default({}) }}"
    volumes: "{{ settings[item].volumes | default([]) | union(['/etc/docker-containers/' + settings[item].name + '.yml:/variables.yml:ro']) | list }}"
    volumes_from: "{{ settings[item].volumes_from | default([]) }}"
    state: "{{ 'restarted' if (configure_res | result_item(item) | changed) else 'reloaded' }}"
    restart_policy: always
    pull: always
  with_items: "{{ run_names }}"
  register: result
  ignore_errors: yes

- name: Fail on errors except image not found
  fail:
    msg: "{{ result.msg }}"
  when: "result | any_failed_except_image_not_found(missing_ok)"

- name: Refresh information about running containers
  action:
    module: docker_facts

- name: Stop unknown containers
  command: "docker stop {{ item }}"
  with_items: "{{ stop_names }}"
  when: remove_unknown_containers

- name: Remove unknown containers
  command: "docker rm -v {{ item }}"
  with_items: "{{ stop_names }}"
  when: remove_unknown_containers

- name: Remove configuration for unknown containers
  file:
    path: "/etc/docker-containers/{{ item }}.yml"
    state: absent
  with_items: "{{ stop_names }}"
  when: remove_unknown_containers
